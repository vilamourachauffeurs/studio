rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return exists(/databases/$(database)/documents/users/$(userId)) && isOwner(userId);
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    match /bookings/{bookingId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(bookingId) {
        return request.auth.uid == resource.data.createdById;
      }
           function isExistingOwner(bookingId) {
        return exists(/databases/$(database)/documents/bookings/$(bookingId)) && isSignedIn() && request.auth.uid == get(/databases/$(database)/documents/bookings/$(bookingId)).data.createdById;
      }

      allow get: if isSignedIn() && request.auth.uid == resource.data.createdById;
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.createdById;
      allow update: if isSignedIn() && isExistingOwner(bookingId);
      allow delete: if isSignedIn() && isExistingOwner(bookingId);
    }


    match /drivers/{driverId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(driverId) {
        return request.auth.uid == driverId;
      }
        function isExistingOwner(driverId) {
        return exists(/databases/$(database)/documents/drivers/$(driverId)) && isOwner(driverId);
      }

      allow get: if isSignedIn() && isOwner(driverId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(driverId);
      allow update: if isSignedIn() && isExistingOwner(driverId);
      allow delete: if isSignedIn() && isExistingOwner(driverId);
    }


    match /clients/{clientId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(clientId) {
        return request.auth.uid == clientId;
      }
             function isExistingOwner(clientId) {
        return exists(/databases/$(database)/documents/clients/$(clientId)) && isOwner(clientId);
      }

      allow get: if isSignedIn() && isOwner(clientId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(clientId);
      allow update: if isSignedIn() && isExistingOwner(clientId);
      allow delete: if isSignedIn() && isExistingOwner(clientId);
    }


    match /partners/{partnerId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(partnerId) {
        return request.auth.uid == partnerId;
      }
              function isExistingOwner(partnerId) {
        return exists(/databases/$(database)/documents/partners/$(partnerId)) && isOwner(partnerId);
      }

      allow get: if isSignedIn() && isOwner(partnerId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(partnerId);
      allow update: if isSignedIn() && isExistingOwner(partnerId);
      allow delete: if isSignedIn() && isExistingOwner(partnerId);
    }


    match /operators/{operatorId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(operatorId) {
        return request.auth.uid == operatorId;
      }
        function isExistingOwner(operatorId) {
        return exists(/databases/$(database)/documents/operators/$(operatorId)) && isOwner(operatorId);
      }

      allow get: if isSignedIn() && isOwner(operatorId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(operatorId);
      allow update: if isSignedIn() && isExistingOwner(operatorId);
      allow delete: if isSignedIn() && isExistingOwner(operatorId);
    }
  }
}