rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-only access to their profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user's ID matches the requested userId.
     * @deny (get, create, update, delete) if the user's ID does not match the requested userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to booking documents. Only authenticated users can create bookings,
     * and only the creator can modify or delete them.
     * @path /bookings/{bookingId}
     * @allow (create) if the user is signed in and the createdById field matches their user ID.
     * @allow (get, list) if true
     * @allow (update, delete) if the user is the owner of the booking (createdById matches their user ID).
     * @deny (create, update, delete) if the above conditions are not met.
     * @principle Enforces ownership for writes, allows public reads.
     */
    match /bookings/{bookingId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }

      function isExistingOwner(ownerId) {
        return isSignedIn() && isOwner(ownerId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdById == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.createdById == resource.data.createdById && resource.data.createdById == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.createdById == request.auth.uid;
    }

    /**
     * @description Allows public read access to driver profiles but restricts write access.
     * @path /drivers/{driverId}
     * @allow (get, list) Everyone.
     * @deny (create, update, delete) No one without further conditions.
     * @principle Allows public reads, restricts writes.
     */
    match /drivers/{driverId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to client profiles but restricts write access.
     * @path /clients/{clientId}
     * @allow (get, list) Everyone.
     * @deny (create, update, delete) No one without further conditions.
     * @principle Allows public reads, restricts writes.
     */
    match /clients/{clientId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to partner profiles but restricts write access.
     * @path /partners/{partnerId}
     * @allow (get, list) Everyone.
     * @deny (create, update, delete) No one without further conditions.
     * @principle Allows public reads, restricts writes.
     */
    match /partners/{partnerId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to operator profiles but restricts write access.
     * @path /operators/{operatorId}
     * @allow (get, list) Everyone.
     * @deny (create, update, delete) No one without further conditions.
     * @principle Allows public reads, restricts writes.
     */
    match /operators/{operatorId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}