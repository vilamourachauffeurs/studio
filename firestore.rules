/**
 * @file Overview
 * This ruleset enforces a role-based access control model, with specific rules for users,
 * bookings, drivers, clients, partners and operators.
 *
 * Data Structure:
 * - /users/{userId}: Stores public profiles for all users. User documents are accessible only
 *   by the user themselves.
 * - /bookings/{bookingId}: Stores all bookings made in the system. Bookings can only be
 *   created by authenticated users (admins or partners). Modification or deletion is disallowed.
 * - /drivers/{driverId}: Stores all driver profiles. Driver profiles can only be created by
 *   authenticated users (admins). Modification or deletion is disallowed.
 * - /clients/{clientId}: Stores all client profiles. Client profiles can only be created by
 *   authenticated users (admins). Modification or deletion is disallowed.
 * - /partners/{partnerId}: Stores all partner profiles. Partner profiles can only be created by
 *   authenticated users (admins). Modification or deletion is disallowed.
 * - /operators/{operatorId}: Stores all operator profiles. Operator profiles can only be created by
 *   authenticated users (admins). Modification or deletion is disallowed.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Only authenticated users can create bookings, drivers, clients, partners and operators, while
 *   modification and deletion are denied.
 * - Public read access is enabled for bookings, drivers, clients, partners, and operators for read-only purposes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Restricts access to user profiles. Only the user can read their own profile, and only they can create it.
     * @path /users/{userId}
     * @allow (get, create, list) if isSignedIn() && isOwner(userId)
     * @deny (update, delete) always
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to bookings, but restricts creation to authenticated users.
     * @path /bookings/{bookingId}
     * @allow (get, list) if true
     * @allow (create, update) if isSignedIn()
     * @deny (delete) always
     * @principle Allows public read with authenticated user-only writes.
     */
    match /bookings/{bookingId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Allows public read access to drivers, but restricts creation to authenticated users.
     * @path /drivers/{driverId}
     * @allow (get, list) if true
     * @allow (create, update) if isSignedIn()
     * @deny (delete) always
     * @principle Allows public read with authenticated user-only writes.
     */
    match /drivers/{driverId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Allows public read access to clients, but restricts creation to authenticated users.
     * @path /clients/{clientId}
     * @allow (get, list) if true
     * @allow (create, update) if isSignedIn()
     * @deny (delete) always
     * @principle Allows public read with authenticated user-only writes.
     */
    match /clients/{clientId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Allows public read access to partners, but restricts creation to authenticated users.
     * @path /partners/{partnerId}
     * @allow (get, list) if true
     * @allow (create, update) if isSignedIn()
     * @deny (delete) always
     * @principle Allows public read with authenticated user-only writes.
     */
    match /partners/{partnerId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Allows public read access to operators, but restricts creation to authenticated users.
     * @path /operators/{operatorId}
     * @allow (get, list) if true
     * @allow (create, update) if isSignedIn()
     * @deny (delete) always
     * @principle Allows public read with authenticated user-only writes.
     */
    match /operators/{operatorId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }
  }
}