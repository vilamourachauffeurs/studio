/**
 * @fileoverview Firestore Security Rules for Chauffeur Pro.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and role-based access control.
 * It leverages Firebase Authentication to verify user identity and authorize access to resources.
 *
 * Data Structure:
 * The Firestore database is structured with top-level collections for `users`, `bookings`, `drivers`, `clients`, `partners`, and `operators`.
 * Each collection contains documents representing entities of that type.
 * User-specific data is stored directly in the `/users/{userId}` document.
 *
 * Key Security Decisions:
 * - Users can only read their own profile data. Listing all users is denied.
 * - Bookings are publicly readable, but only authenticated users can create them, and only the owner can modify them.
 * - Driver, client, partner, and operator collections are publicly readable. Creation, update, and deletion are restricted.
 *
 * Denormalization for Authorization:
 * Bookings MUST contain the `createdById` field to track the user who created the booking.
 * This allows for secure owner-based access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read their own profile data and create their own user document. Listing all users is denied.
     * @path /users/{userId}
     * @allow (get) User with matching UID can read their own profile.
     * @allow (create) User with matching UID can create their own profile.
     * @deny (get) User tries to read another user's profile.
     * @deny (list) Any user tries to list all users.
     * @deny (create) User tries to create a profile with a mismatched UID.
     * @principle Enforces user-ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if false;
    }

    /**
     * @description Allows public reading of bookings, but restricts creation, update, and deletion to authenticated users with owner permissions.
     * @path /bookings/{bookingId}
     * @allow (get, list) Any user can read bookings.
     * @allow (create) Authenticated user can create a booking if the 'createdById' matches their UID.
     * @allow (update, delete) Only the user who created the booking ('createdById') can update or delete it, and the document must exist.
     * @deny (create) User attempts to create a booking with a mismatched 'createdById'
     * @deny (update, delete) Non-owner attempts to modify or delete a booking.
     * @principle Allows public read access, enforces document ownership for writes.
     */
    match /bookings/{bookingId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdById == request.auth.uid;
      allow update: if isExistingOwner(resource.data.createdById);
      allow delete: if isExistingOwner(resource.data.createdById);
    }

    /**
     * @description Allows public reading of driver profiles, but restricts creation, update, and deletion.
     * @path /drivers/{driverId}
     * @allow (get, list) Any user can read driver profiles.
     * @deny (create, update, delete) No one can create, update, or delete driver profiles.
     * @principle Allows public read access, restricts write access.
     */
    match /drivers/{driverId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public reading of client profiles, but restricts creation, update, and deletion.
     * @path /clients/{clientId}
     * @allow (get, list) Any user can read client profiles.
     * @deny (create, update, delete) No one can create, update, or delete client profiles.
     * @principle Allows public read access, restricts write access.
     */
    match /clients/{clientId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public reading of partner profiles, but restricts creation, update, and deletion.
     * @path /partners/{partnerId}
     * @allow (get, list) Any user can read partner profiles.
     * @deny (create, update, delete) No one can create, update, or delete partner profiles.
     * @principle Allows public read access, restricts write access.
     */
    match /partners/{partnerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public reading of operator profiles, but restricts creation, update, and deletion.
     * @path /operators/{operatorId}
     * @allow (get, list) Any user can read operator profiles.
     * @deny (create, update, delete) No one can create, update, or delete operator profiles.
     * @principle Allows public read access, restricts write access.
     */
    match /operators/{operatorId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}