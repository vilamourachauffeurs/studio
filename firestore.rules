/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model for the Chauffeur Pro platform.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles.
 * - /bookings/{bookingId}: Stores all booking data.
 * - /drivers/{driverId}: Stores driver information.
 * - /clients/{clientId}: Stores client information.
 * - /partners/{partnerId}: Stores partner company information.
 * - /operators/{operatorId}: Stores operator company information.
 *
 * Key Security Decisions:
 * - Users can only read their own profile data. Listing all users is disallowed.
 * - Only authenticated users can create bookings, and their UID is stored as `createdById`.
 * - Bookings, Drivers, Clients, Partners, and Operators are readable by everyone, but only the creator or someone with the proper role can edit these.
 * - All write operations are validated for proper authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles. Users can read their own profile, but listing all users is disallowed.
     * @path /users/{userId}
     * @allow (get) User with ID 'user123' can read their own profile.
     * @allow (create) User with ID 'user123' can create their own profile.
     * @allow (update) User with ID 'user123' can update their own profile.
     * @allow (delete) User with ID 'user123' can delete their own profile.
     * @deny (get) User with ID 'user456' cannot read the profile of user 'user123'.
     * @deny (create) User with ID 'user456' cannot create a profile for user 'user123'.
     * @deny (update) User with ID 'user456' cannot update the profile of user 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete the profile of user 'user123'.
     * @principle Enforces user-ownership for profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to bookings. Any authenticated user can read bookings, but only the booking creator can modify.
     * @path /bookings/{bookingId}
     * @allow (get) Any user can read a booking.
     * @allow (create) User with ID 'user123' can create a booking with 'createdById' set to 'user123'.
     * @allow (update) User with ID 'user123' can update a booking they created (where 'createdById' is 'user123').
     * @allow (delete) User with ID 'user123' can delete a booking they created (where 'createdById' is 'user123').
     * @deny (create) User with ID 'user456' cannot create a booking with 'createdById' set to 'user123'.
     * @deny (update) User with ID 'user456' cannot update a booking created by 'user123' (where 'createdById' is 'user123').
     * @deny (delete) User with ID 'user456' cannot delete a booking created by 'user123' (where 'createdById' is 'user123').
     * @principle Enforces document ownership for writes based on the 'createdById' field.
     */
    match /bookings/{bookingId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdById == request.auth.uid;
      allow update: if isExistingOwner(resource.data.createdById);
      allow delete: if isExistingOwner(resource.data.createdById);
    }

    /**
     * @description Controls access to driver profiles. Any authenticated user can read driver profiles, but only the creator can modify.
     * @path /drivers/{driverId}
     * @allow (get) Any user can read a driver profile.
     * @allow (create) User with ID 'user123' can create a driver profile.
     * @allow (update) User with ID 'user123' can update a driver profile they created (where 'id' is 'user123').
     * @allow (delete) User with ID 'user123' can delete a driver profile they created (where 'id' is 'user123').
     * @deny (create) User with ID 'user456' cannot create a driver profile with 'id' set to 'user123'.
     * @deny (update) User with ID 'user456' cannot update a driver profile created by 'user123' (where 'id' is 'user123').
     * @deny (delete) User with ID 'user456' cannot delete a driver profile created by 'user123' (where 'id' is 'user123').
     * @principle Enforces document ownership for writes based on the 'id' field.
     */
    match /drivers/{driverId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isExistingOwner(driverId);
      allow delete: if isExistingOwner(driverId);
    }

    /**
     * @description Controls access to client profiles. Any authenticated user can read client profiles, but only the client creator can modify.
     * @path /clients/{clientId}
     * @allow (get) Any user can read a client profile.
     * @allow (create) User with ID 'user123' can create a client profile.
     * @allow (update) User with ID 'user123' can update a client profile they created (where 'id' is 'user123').
     * @allow (delete) User with ID 'user123' can delete a client profile they created (where 'id' is 'user123').
     * @deny (create) User with ID 'user456' cannot create a client profile with 'id' set to 'user123'.
     * @deny (update) User with ID 'user456' cannot update a client profile created by 'user123' (where 'id' is 'user123').
     * @deny (delete) User with ID 'user456' cannot delete a client profile created by 'user123' (where 'id' is 'user123').
     * @principle Enforces document ownership for writes based on the 'id' field.
     */
    match /clients/{clientId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isExistingOwner(clientId);
      allow delete: if isExistingOwner(clientId);
    }

    /**
     * @description Controls access to partner profiles. Any authenticated user can read partner profiles, but only the creator can modify.
     * @path /partners/{partnerId}
     * @allow (get) Any user can read a partner profile.
     * @allow (create) User with ID 'user123' can create a partner profile.
     * @allow (update) User with ID 'user123' can update a partner profile they created (where 'id' is 'user123').
     * @allow (delete) User with ID 'user123' can delete a partner profile they created (where 'id' is 'user123').
     * @deny (create) User with ID 'user456' cannot create a partner profile with 'id' set to 'user123'.
     * @deny (update) User with ID 'user456' cannot update a partner profile created by 'user123' (where 'id' is 'user123').
     * @deny (delete) User with ID 'user456' cannot delete a partner profile created by 'user123' (where 'id' is 'user123').
     * @principle Enforces document ownership for writes based on the 'id' field.
     */
    match /partners/{partnerId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isExistingOwner(partnerId);
      allow delete: if isExistingOwner(partnerId);
    }

     /**
      * @description Controls access to operator profiles. Any authenticated user can read operator profiles, but only the creator can modify.
      * @path /operators/{operatorId}
      * @allow (get) Any user can read a operator profile.
      * @allow (create) User with ID 'user123' can create a operator profile.
      * @allow (update) User with ID 'user123' can update a operator profile they created (where 'id' is 'user123').
      * @allow (delete) User with ID 'user123' can delete a operator profile they created (where 'id' is 'user123').
      * @deny (create) User with ID 'user456' cannot create a operator profile with 'id' set to 'user123'.
      * @deny (update) User with ID 'user456' cannot update a operator profile created by 'user123' (where 'id' is 'user123').
      * @deny (delete) User with ID 'user456' cannot delete a operator profile created by 'user123' (where 'id' is 'user123').
      * @principle Enforces document ownership for writes based on the 'id' field.
      */
    match /operators/{operatorId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isExistingOwner(operatorId);
      allow delete: if isExistingOwner(operatorId);
    }
  }

  // Helper Functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}