/**
 * @file Firestore Security Rules for Chauffeur Pro
 * @version Prototyping
 *
 * @description This ruleset enforces a strict user-ownership model, role-based access control,
 * and authorization independence through data denormalization. It prioritizes security and
 * performance by minimizing `get()` calls and using structural segregation.
 *
 * Core Philosophy:
 *  - Strict user-ownership model: Users can only access their own data unless explicitly
 *    granted access through role-based permissions or shared access patterns.
 *  - Role-based access control: Admins have broad access, while partners and drivers have
 *    restricted access based on their roles and relationships to specific resources.
 *  - Authorization Independence: Denormalized fields like 'createdById', 'createdByRole', and 'driverId'
 *    are used within documents to enable authorization without requiring additional reads.
 *
 * Data Structure:
 *  - /users/{userId}: Stores user profiles.  Access is restricted to the owner and admins.
 *  - /bookings/{bookingId}: Stores booking data.  Access is controlled based on the 'createdById',
 *    'createdByRole', and 'driverId' fields.
 *  - /drivers/{driverId}, /clients/{clientId}, /partners/{partnerId}, /notifications/{notificationId}, /reports/{reportId}:
 *    Top-level collections with individual documents. Access is determined by role and relationships.
 *
 * Key Security Decisions:
 *  - User listing is generally disallowed for security reasons.
 *  - Data validation is relaxed in this prototyping phase, focusing on authorization and relational integrity.
 *
 * Denormalization for Authorization:
 *  - The `bookings` collection includes `createdById` and `createdByRole`, enabling rules to verify
 *    booking creation permissions without reading the user document.
 *  - The `bookings` collection includes `driverId`, enabling drivers to only access bookings assigned
 *    to them, without needing to access another document to verify the assignment.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (get, update, delete) User with matching {userId} in request.auth and resource.data.id.
     * @allow (create) User with matching {userId} in request.auth and request.resource.data.id.
     * @deny (get, update, delete) User with non-matching {userId}.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == request.auth.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to booking data.
     * @path /bookings/{bookingId}
     * @allow (create) User with role 'partner' where request.auth.uid matches request.resource.data.createdById
     * @allow (get, update, delete) Driver with matching {driverId} in resource.data.driverId.
     * @deny (create, update, delete) Non-authorized users.
     * @principle Enforces role-based access control and authorization independence.
     */
    match /bookings/{bookingId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if false;

      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to driver data.
     * @path /drivers/{driverId}
     * @allow (get) Any signed-in user.
     * @allow (create, update, delete) No one.
     * @deny (create, update, delete) All write request.
     * @principle Restricts write access to drivers collection for security.
     */
    match /drivers/{driverId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if false;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to client data.
     * @path /clients/{clientId}
     * @allow (get) Any signed-in user.
     * @allow (create, update, delete) No one.
     * @deny (create, update, delete) All write request.
     * @principle Restricts write access to clients collection for security.
     */
    match /clients/{clientId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if false;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to partner data.
     * @path /partners/{partnerId}
     * @allow (get) Any signed-in user.
     * @allow (create, update, delete) No one.
     * @deny (create, update, delete) All write request.
     * @principle Restricts write access to partners collection for security.
     */
    match /partners/{partnerId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if false;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to notification data.
     * @path /notifications/{notificationId}
     * @allow (get) Any signed-in user.
     * @allow (create, update, delete) No one.
     * @deny (create, update, delete) All write request.
     * @principle Restricts write access to notifications collection for security.
     */
    match /notifications/{notificationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if false;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to report data.
     * @path /reports/{reportId}
     * @allow (get) Any signed-in user.
     * @allow (create, update, delete) No one.
     * @deny (create, update, delete) All write request.
     * @principle Restricts write access to reports collection for security.
     */
    match /reports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if false;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}