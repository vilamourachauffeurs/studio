/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model for the Chauffeur Pro platform.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with access controlled by user ID and role.
 * - /bookings/{bookingId}: Stores booking data, with access controlled by user role and relationship to the booking.
 * - /drivers/{driverId}: Stores driver data.
 * - /clients/{clientId}: Stores client data.
 * - /partners/{partnerId}: Stores partner data.
 * - /operators/{operatorId}: Stores operator data.
 *
 * Key Security Decisions:
 * - Access to user profiles (/users/{userId}) is restricted to the owner of the profile.
 * - Bookings (/bookings/{bookingId}) can be created by admins or partners, and access is controlled based on the booking's status and related IDs.
 * - Driver, Client, Partner and Operator collections are generally accessible for reading, but write access is restricted to admins.
 *
 * Denormalization for Authorization:
 * - The `Booking` entity requires the `createdById` field to determine the user who created the booking.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update, delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to bookings.
     * @path /bookings/{bookingId}
     */
    match /bookings/{bookingId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && (isAdmin() || isPartner());
      allow update: if isSignedIn() && (isAdmin() || isPartner() || isDriver());
      allow delete: if isSignedIn() && (isAdmin() || isPartner() || isDriver());
    }

    /**
     * @description Controls access to drivers.
     * @path /drivers/{driverId}
     */
    match /drivers/{driverId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isAdmin();
      allow update, delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Controls access to clients.
     * @path /clients/{clientId}
     */
    match /clients/{clientId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isAdmin();
      allow update, delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Controls access to partners.
     * @path /partners/{partnerId}
     */
    match /partners/{partnerId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isAdmin();
      allow update, delete: if isSignedIn() && isAdmin();
    }

     /**
     * @description Controls access to operators.
     * @path /operators/{operatorId}
     */
    match /operators/{operatorId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isAdmin();
      allow update, delete: if isSignedIn() && isAdmin();
    }


    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isPartner() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'partner';
    }

     function isDriver() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'driver';
    }

    function isOperator() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'operator';
    }
  }
}