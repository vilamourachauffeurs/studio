/**
 * @fileoverview Firestore Security Rules for Chauffeur Pro.
 *
 * Core Philosophy:
 * This ruleset employs a role-based access control model, granting permissions based on the user's assigned role (admin, partner, driver, operator).
 * Users can only manage their own profiles.
 * Bookings can be created by admins or partners, and read access is generally public, while modification is restricted.
 * Access to driver, client, partner, and operator data is generally restricted to admins.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with the `role` field indicating the user's permissions.
 * - /bookings/{bookingId}: Stores booking information, including creator, partner, operator, and driver IDs.
 * - /drivers/{driverId}: Stores driver profiles.
 * - /clients/{clientId}: Stores client information.
 * - /partners/{partnerId}: Stores partner company information.
 * - /operators/{operatorId}: Stores operator company information.
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - Public read access to bookings is enabled for broader accessibility.
 * - Strict ownership is enforced for user profiles.
 * - Data validation is limited to authorization-critical fields.
 *
 * Denormalization for Authorization:
 *  - Bookings: The `createdById` field is used to determine who created the booking,
 *   allowing for the enforcement of creator-based access control.
 *  - Users: The `role` field is critical for role-based access control decisions.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided userId.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner of a document.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId));
    }

    /**
     * @description Checks if the authenticated user has the 'admin' role.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    /**
     * @description Checks if the authenticated user has the 'partner' role.
     * @return {boolean} True if the user is a partner, false otherwise.
     */
    function isPartner() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'partner';
    }

    /**
     * @description Checks if the authenticated user has the 'operator' role.
     * @return {boolean} True if the user is an operator, false otherwise.
     */
    function isOperator() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'operator';
    }

    /**
     * @description Checks if the authenticated user has the 'driver' role.
     * @return {boolean} True if the user is a driver, false otherwise.
     */
    function isDriver() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'driver';
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     * @allow (get) Any user can read any user profile.
     * @allow (update) User with ID 'user123' can update their own profile.
     * @deny (create) User with ID 'user456' cannot create a profile with ID 'user123'.
     * @deny (update) User with ID 'user123' cannot update the profile of user 'user456'.
     * @deny (delete) Only admins can delete user profiles.
     * @principle Enforces document ownership for writes and restricts listing for privacy.
     */
    match /users/{userId} {
      allow get: if true;
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId);
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for bookings.
     * @path /bookings/{bookingId}
     * @allow (create) Admin or Partner can create a booking.
     * @allow (get) Any user can read any booking.
     * @allow (update) Only the booking creator or an admin can update a booking.
     * @deny (create) Regular users cannot create bookings.
     * @deny (update) Users who are not the creator or admin cannot update bookings.
     * @deny (delete) Only admins can delete bookings.
     * @principle Allows public read access but restricts write access to authorized users.
     */
    match /bookings/{bookingId} {
      allow get: if true;
      allow list: if false;
      allow create: if (isAdmin() || isPartner()) && request.resource.data.createdById == request.auth.uid;
      allow update: if isSignedIn() && (isOwner(resource.data.createdById) || isAdmin());
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for drivers.
     * @path /drivers/{driverId}
     * @allow (get) Any user can read any driver profile.
     * @allow (create) Only admin can create a driver profile.
     * @allow (update) Only admin can update a driver profile.
     * @deny (create) Regular users cannot create driver profiles.
     * @deny (update) Regular users cannot update driver profiles.
     * @deny (delete) Only admins can delete driver profiles.
     * @principle Restricts driver management to administrators.
     */
    match /drivers/{driverId} {
      allow get: if true;
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for clients.
     * @path /clients/{clientId}
     * @allow (get) Any user can read any client profile.
     * @allow (create) Only admin can create a client profile.
     * @allow (update) Only admin can update a client profile.
     * @deny (create) Regular users cannot create client profiles.
     * @deny (update) Regular users cannot update client profiles.
     * @deny (delete) Only admins can delete client profiles.
     * @principle Restricts client management to administrators.
     */
    match /clients/{clientId} {
      allow get: if true;
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for partners.
     * @path /partners/{partnerId}
     * @allow (get) Any user can read any partner profile.
     * @allow (create) Only admin can create a partner profile.
     * @allow (update) Only admin can update a partner profile.
     * @deny (create) Regular users cannot create partner profiles.
     * @deny (update) Regular users cannot update partner profiles.
     * @deny (delete) Only admins can delete partner profiles.
     * @principle Restricts partner management to administrators.
     */
    match /partners/{partnerId} {
      allow get: if true;
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for operators.
     * @path /operators/{operatorId}
     * @allow (get) Any user can read any operator profile.
     * @allow (create) Only admin can create a operator profile.
     * @allow (update) Only admin can update a operator profile.
     * @deny (create) Regular users cannot create operator profiles.
     * @deny (update) Regular users cannot update operator profiles.
     * @deny (delete) Only admins can delete operator profiles.
     * @principle Restricts operator management to administrators.
     */
    match /operators/{operatorId} {
      allow get: if true;
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}