/**
 * @fileoverview Firestore Security Rules for Chauffeur Pro.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user roles and ownership.
 * It aims to strike a balance between strict authorization and rapid prototyping.
 *
 * Data Structure:
 * The Firestore database consists of top-level collections for users, bookings, drivers, clients, partners, and operators.
 *  - /users/{userId}: Stores public user profiles.
 *  - /bookings/{bookingId}: Stores booking information.
 *  - /drivers/{driverId}: Stores driver information.
 *  - /clients/{clientId}: Stores client information.
 *  - /partners/{partnerId}: Stores partner information.
 *  - /operators/{operatorId}: Stores operator information.
 *
 * Key Security Decisions:
 *  - User listing is explicitly denied to protect user privacy.
 *  - Data validation is limited to essential fields for authorization and relational integrity.
 *  - Public read access is granted where appropriate, with owner-only write restrictions.
 *
 * Denormalization for Authorization:
 *  - The `Booking` entity contains fields like `createdById`, `partnerId`, `operatorId`, and `driverId` to simplify authorization checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get) - Any authenticated user can read any user profile.
     * @deny (list) - Listing all users is not allowed.
     * @deny (update) - User cannot update another user's profile.
     * @deny (delete) - User cannot delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if true;
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to bookings with owner-only writes.
     * @path /bookings/{bookingId}
     * @allow (get) - Any user can read any booking.
     * @allow (list) - Any user can list bookings.
     * @allow (create) - Authenticated user can create a booking if request.resource.data.createdById matches their auth.uid.
     * @allow (update) - Only the user who created the booking can update it.
     * @allow (delete) - Only the user who created the booking can delete it.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /bookings/{bookingId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.createdById == request.auth.uid;
      allow update: if isExistingOwner(resource.data.createdById);
      allow delete: if isExistingOwner(resource.data.createdById);
    }

    /**
     * @description Allows public read access to drivers, with no write access allowed to clients.
     * @path /drivers/{driverId}
     * @allow (get) - Any user can read any driver.
     * @allow (list) - Any user can list drivers.
     * @deny (create) - No user can create a driver document via the client SDK.
     * @deny (update) - No user can update a driver document via the client SDK.
     * @deny (delete) - No user can delete a driver document via the client SDK.
     * @principle Public read, no client writes.
     */
    match /drivers/{driverId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to clients, with no write access allowed to clients.
     * @path /clients/{clientId}
     * @allow (get) - Any user can read any client.
     * @allow (list) - Any user can list clients.
     * @deny (create) - No user can create a client document via the client SDK.
     * @deny (update) - No user can update a client document via the client SDK.
     * @deny (delete) - No user can delete a client document via the client SDK.
     * @principle Public read, no client writes.
     */
    match /clients/{clientId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to partners, with no write access allowed to clients.
     * @path /partners/{partnerId}
     * @allow (get) - Any user can read any partner.
     * @allow (list) - Any user can list partners.
     * @deny (create) - No user can create a partner document via the client SDK.
     * @deny (update) - No user can update a partner document via the client SDK.
     * @deny (delete) - No user can delete a partner document via the client SDK.
     * @principle Public read, no client writes.
     */
    match /partners/{partnerId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to operators, with no write access allowed to clients.
     * @path /operators/{operatorId}
     * @allow (get) - Any user can read any operator.
     * @allow (list) - Any user can list operators.
     * @deny (create) - No user can create a operator document via the client SDK.
     * @deny (update) - No user can update a operator document via the client SDK.
     * @deny (delete) - No user can delete a operator document via the client SDK.
     * @principle Public read, no client writes.
     */
    match /operators/{operatorId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    function isSignedIn() {
        return request.auth != null;
    }
  }
}